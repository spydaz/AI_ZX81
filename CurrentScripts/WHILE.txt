    PUSH, 
	6, // Init a with "6"
    STORE, 
	0, 
    PUSH,  // Init b with "4"
	4, 
    STORE, 
	1,   
    PUSH, // Init total to 0
	0, 
    STORE, 
	2,   
    LOAD,   // While part // Here is address 12
	1,            // Stack contains b
    PUSH, 
	1,            // Stack contains b, 1
    ISGE,               // Stack contains b >= 1
    NOT,                // Stack contains b < 1
    JIF_T, 
	36,            // 35 is the address of the HALT label
    LOAD,     // Inner loop part 
	0,            // Stack contains a
    LOAD, 
	2,            // Stack contains a, total
    ADD,                // Stack contains a + total
    STORE, 
	2,           // Save in total, meaning total = a + total
    LOAD, 
	1,            // Stack contains b
    PUSH, 
	1,            // Stack contains b, 1
    SUB,                // Stack contains b - 1
    STORE, 
	1,           // Save in b, meaning b = b - 1
    JMP, 
	12,            // Go back to the start of the loop
    HALT
	
int total = 0;
    while (b >= 1) {total += a;  --b; }
	