<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="TextOut.Text" xml:space="preserve">
    <value>SpydazWeb Basic Programming Language :
	DESCRIPTION:
		A basic programming language designed in stages to be compiled and executed on a virtual machine :
		the language is translated to an assembly code to be executed on a Virtual Stack based CPU
		The process of tokeninzing the input and susequentially into an executable abstract syntax tree
		the tree generates the required assembly code and executes the code in a virtual environment.
	TYPES: 
		INT = [96 / 96.4]				: Integers and floating points are handled the same
		boolean  = [True/False]			: Standard True or False
		String = "HelloWorld"				: Strings must be surrounded in quotes
	PRINT_TO_CONSOLE : 
		Print "HelloWorld"				: Prints String Quotes Signify String Content
		Print 34						: Prints Integer or Floating Point
		Print [True/False]				: Prints a Boolean True
		Print $Variable$				: Prints a Variable Variables must be surrounded in Dollar signs
		CLS						: Clears the screen of the console
	VARIABLE_ASSIGNMENT:
		Dim $Variable$ as [INT / Boolean / string] = [98 / [True/False] / "HelloWorld" / $Variable$]	- The full assignment can be used
		Dim $Variable$ as [INT / Boolean / string]							- The Half Assigment will use Default values =  / 0 / "" / False 
		$variable$ = [98 / [True/False] / "HelloWorld" / $Variable$]					- Re-Assignment - Variable must be instantiated
	IF_THEN						: If Condition = true then ExecuteStatements (Condition must be a Boolean Expression)
		If (Condition) then				: The condition will evaluate to true allowing for the statments to be executed or the end of the statment will be realised
		[Statements]					: THe END IF signifys the end of the statement
		End if
	IF_THEN_ELSE						: If Condition = True then executes Statements else ExecuteStatements (Condition must be a Boolean Expression)
		If (Condition) then				: the Condition will be evaluated and the (THEN) first statements executed.if true or  
		[Statements_1]				: if false the second statements (ELSE) will be evaluated. THe END IF signifys the end of the statement
		Else
		[Statements_2]
		End if
	DO_WHILE_LOOP					: if Condition is true then execute the statements , 
		DO While (Condition)				: The LOOP signifys the end of the loop. (Condition must be a Boolean Expression) 
		[Statements_1]
		LOOP
	FOR_NEXT_LOOP :					: the indicator is used as a marker for the counter of the loop
		FOR [$I$] = Start to Finish			: a start value is given and a finish value is given
		[Statements_1]				: The statements sre executed ; 
		Next						: and the Next Marks the end of the LOOP

SpydazWeb Assembly Language : 
	Description :
		This assembly language is specific to this virtual processor 
		Enableing for the code to be executed on the cpu: 
		This is a Micro based instruction set (Misc)
	ZX81:
		_PUSH					: Pushes items on to the stack (top)
		_POP					: Pops items off the stack (top)
		_PEEK					: Views items on the stack (top)
		_WAIT					: Pauses execution of code
		_PAUSE					: Pauses execution of code
		_HALT					: HALT execution of code
		_RESUME					: Resumes execution of code
		_DUP					: Duplicates item on the stack (top)
		_JMP					: Jumps to location
		_JIF_T					: Jump if true
		_JIF_F					: Jump if False
		_JIF_EQ					: Jump if Equals
		_JIF_GT					: Jump if Greater than
		_JIF_LT					: Jump if Less than
		_LOAD					: Load Memory Address
		_STORE					: Store at memeory Address
		_REMOVE					: Removes item at memeory address so location can be free for replacement or updated item
		_CALL					: call location in memory
		_RET					: Return to location called
		_PRINT_M				: Prints to TextConsole Display
		_ADD					: Adds last two items on the stack
		_SUB					: subracts last two items on the stack
		_MUL					: multiplys last two items on the stack
		_DIV					: divides last two items on the stack
		_AND					: if both last two items on the stack are true
		_OR						: if either last two items on the stack are true
		_NOT					: if both last two items on the stack are not true
		_IS_EQ					: if both last two items on the stack are Equals
		_IS_GT					: both items are compared 
		_IS_GTE					: both items are compared 
		_IS_LT					: both items are compared 
		_IS_LTE					: both items are compared 
		_TO_POS					: number is sent to negative
		_TO_NEG					: number is sent to positive
		_INCR					: number is incremented by 1
		_DECR 					: number is Decremented by 2
</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAYAICACAAAAAAAwAQAAZgAAACAgAAAAAAAAqAgAAJYBAAAgIBAAAAAAAOgCAAA+CgAAEBACAAAA
        AACwAAAAJg0AABAQAAAAAAAAaAUAANYNAAAQEBAAAAAAACgBAAA+EwAAKAAAACAAAABAAAAAAQABAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAD///8B////gf///4H///+B//
        //gf///4H///+B////gf///4GeT5+BgE+fgcDBg4HMwIGBzMyZgeHAgYHhwYOB////gf///4H///+B//
        //gf///4H///+B////gP///wAAAAAAAAAAAKgAAAAAAAAAAAAADAAAADgAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABwAAAAygAAAAgAAAAQAAAAAEA
        CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AzP//AJn//wBm//8AM///AAD//wD/zP8AzMz/AJnM
        /wBmzP8AM8z/AADM/wD/mf8AzJn/AJmZ/wBmmf8AM5n/AACZ/wD/Zv8AzGb/AJlm/wBmZv8AM2b/AABm
        /wD/M/8AzDP/AJkz/wBmM/8AMzP/AAAz/wD/AP8AzAD/AJkA/wBmAP8AMwD/AAAA/wD//8wAzP/MAJn/
        zABm/8wAM//MAAD/zAD/zMwAzMzMAJnMzABmzMwAM8zMAADMzAD/mcwAzJnMAJmZzABmmcwAM5nMAACZ
        zAD/ZswAzGbMAJlmzABmZswAM2bMAABmzAD/M8wAzDPMAJkzzABmM8wAMzPMAAAzzAD/AMwAzADMAJkA
        zABmAMwAMwDMAAAAzAD//5kAzP+ZAJn/mQBm/5kAM/+ZAAD/mQD/zJkAzMyZAJnMmQBmzJkAM8yZAADM
        mQD/mZkAzJmZAJmZmQBmmZkAM5mZAACZmQD/ZpkAzGaZAJlmmQBmZpkAM2aZAABmmQD/M5kAzDOZAJkz
        mQBmM5kAMzOZAAAzmQD/AJkAzACZAJkAmQBmAJkAMwCZAAAAmQD//2YAzP9mAJn/ZgBm/2YAM/9mAAD/
        ZgD/zGYAzMxmAJnMZgBmzGYAM8xmAADMZgD/mWYAzJlmAJmZZgBmmWYAM5lmAACZZgD/ZmYAzGZmAJlm
        ZgBmZmYAM2ZmAABmZgD/M2YAzDNmAJkzZgBmM2YAMzNmAAAzZgD/AGYAzABmAJkAZgBmAGYAMwBmAAAA
        ZgD//zMAzP8zAJn/MwBm/zMAM/8zAAD/MwD/zDMAzMwzAJnMMwBmzDMAM8wzAADMMwD/mTMAzJkzAJmZ
        MwBmmTMAM5kzAACZMwD/ZjMAzGYzAJlmMwBmZjMAM2YzAABmMwD/MzMAzDMzAJkzMwBmMzMAMzMzAAAz
        MwD/ADMAzAAzAJkAMwBmADMAMwAzAAAAMwD//wAAzP8AAJn/AABm/wAAM/8AAAD/AAD/zAAAzMwAAJnM
        AABmzAAAM8wAAADMAAD/mQAAzJkAAJmZAABmmQAAM5kAAACZAAD/ZgAAzGYAAJlmAABmZgAAM2YAAABm
        AAD/MwAAzDMAAJkzAABmMwAAMzMAAAAzAAD/AAAAzAAAAJkAAABmAAAAMwAAAAAA7gAAAN0AAAC7AAAA
        qgAAAIgAAAB3AAAAVQAAAEQAAAAiAAAAEQAA7gAAAN0AAAC7AAAAqgAAAIgAAAB3AAAAVQAAAEQAAAAi
        AAAAEQAA7gAAAN0AAAC7AAAAqgAAAIgAAAB3AAAAVQAAAEQAAAAiAAAAEQAAAO7u7gDd3d0Au7u7AKqq
        qgCIiIgAd3d3AFVVVQBEREQAIiIiABEREQAAAAAA///9/f39/f39/f39/f39/f39/f39/f39/f39/f39
        /////f39/f39/f39/f39/f39/f39/f39/f39/f39/f39//39/f39/f39/f39/f39/f39/f39/f39/f39
        /f39/f39/f39/Xh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eP39/f39/f14eHh4eHh4eHh4eHh4eHh4eHh4
        eHh4eHh4eP39/f39/Xh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4/f39/f39eHh4eHh4eHh4eHh4eHh4
        eHh4eHh4eHh4eHj9/f39/f14eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eP39/f39/Xh4eHh4eHh4eHh4
        eHh4eHh4eHh4eHh4eHh4/f39/f39eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHj9/f39/f14eHh4eHh4
        eHh4eHh4eHh4eHh4eHh4eHh4eP39/f39/Xh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4/f39/f39eHj/
        /3h4eHj//3j//3h4eHh4//94eHh4eHj9/f39/f14eP//////////eP//eHh4eHj//3h4eHh4eP39/f39
        /Xh4eP///////3h4//////94eP//////eHh4/f39/f39eHh4//94eP//eHj///////94////////eHj9
        /f39/f14eHj//3h4//94eP//eHj//3j//3h4//94eP39/f39/Xh4eHj/////eHh4////////eP//////
        /3h4/f39/f39eHh4eP////94eHj//////3h4//////94eHj9/f39/f14eHh4eHh4eHh4eHh4eHh4eHh4
        eHh4eHh4eP39/f39/Xh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4/f39/f39eHh4eHh4eHh4eHh4eHh4
        eHh4eHh4eHh4eHj9/f39/f14eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eP39/f39/Xh4eHh4eHh4eHh4
        eHh4eHh4eHh4eHh4eHh4/f39/f39eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHj9/f39/f14eHh4eHh4
        eHh4eHh4eHh4eHh4eHh4eHh4eP39/f39/f14eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHj9/f39/f39/f39
        /f39/f39/f39/f39/f39/f39/f39/f39/f39/f39/f39/f39/f39/f39/f39/f39/f39/f39/f39/f39
        /f14/Xj9eP39/f39/f39/f39/f39/f39/f39/f39//39/f39/f39/f39/f39/f39/f39/f39/f39/f39
        /f////39/f39/f39/f39/f39/f39/f39/f39/f39/f3//8AAAAOAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAHAAAADKAAAACAAAABAAAAAAQAEAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wAF8/wAAmT/AAYI3QCECPIApQBGANQAAADqqwIAFLcfABFk
        AAAFLFYAOnGQAMDAwACAgIAAQEBAAAAAAAD/////////////////////////////////////////////
        /////////////////////3d3d3d3d3d3d3d3d/////d3d3d3d3d3d3d3d3d////3d3d3d3d3d3d3d3d3
        f///93d3d3d3d3d3d3d3d3////d3d3d3d3d3d3d3d3d////3d3d3d3d3d3d3d3d3f///93d3d3d3d3d3
        d3d3d3////d3d3d3d3d3d3d3d3d////3d3d3d3d3d3d3d3d3f///93/3d3/3/3d3f/d3d3////d/////
        9/93d3/3d3d////3d////3f///d///93f///93f/d/93////f///93////d3/3f/d/93/3/3f/d////3
        d3//93f///9////3f///93d///d3///3f///d3////d3d3d3d3d3d3d3d3d////3d3d3d3d3d3d3d3d3
        f///93d3d3d3d3d3d3d3d3////d3d3d3d3d3d3d3d3d////3d3d3d3d3d3d3d3d3f///93d3d3d3d3d3
        d3d3d3////d3d3d3d3d3d3d3d3d/////d3d3d3d3d3d3d3d3////////////////////////////////
        ////////////////f39//////////////////////////////////////////////////////////8AA
        AAOAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAA
        AAHAAAADKAAAABAAAAAgAAAAAQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AAAAAAAAA
        AAA//AAAP/wAAD/8AAA//AAAKtwAACJMAAAqlAAANkwAAD/8AAA//AAAP/wAAAAAAAAAAAAAAAAAAIAB
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAB
        AAAoAAAAEAAAACAAAAABAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AMz//wCZ//8AZv//ADP/
        /wAA//8A/8z/AMzM/wCZzP8AZsz/ADPM/wAAzP8A/5n/AMyZ/wCZmf8AZpn/ADOZ/wAAmf8A/2b/AMxm
        /wCZZv8AZmb/ADNm/wAAZv8A/zP/AMwz/wCZM/8AZjP/ADMz/wAAM/8A/wD/AMwA/wCZAP8AZgD/ADMA
        /wAAAP8A///MAMz/zACZ/8wAZv/MADP/zAAA/8wA/8zMAMzMzACZzMwAZszMADPMzAAAzMwA/5nMAMyZ
        zACZmcwAZpnMADOZzAAAmcwA/2bMAMxmzACZZswAZmbMADNmzAAAZswA/zPMAMwzzACZM8wAZjPMADMz
        zAAAM8wA/wDMAMwAzACZAMwAZgDMADMAzAAAAMwA//+ZAMz/mQCZ/5kAZv+ZADP/mQAA/5kA/8yZAMzM
        mQCZzJkAZsyZADPMmQAAzJkA/5mZAMyZmQCZmZkAZpmZADOZmQAAmZkA/2aZAMxmmQCZZpkAZmaZADNm
        mQAAZpkA/zOZAMwzmQCZM5kAZjOZADMzmQAAM5kA/wCZAMwAmQCZAJkAZgCZADMAmQAAAJkA//9mAMz/
        ZgCZ/2YAZv9mADP/ZgAA/2YA/8xmAMzMZgCZzGYAZsxmADPMZgAAzGYA/5lmAMyZZgCZmWYAZplmADOZ
        ZgAAmWYA/2ZmAMxmZgCZZmYAZmZmADNmZgAAZmYA/zNmAMwzZgCZM2YAZjNmADMzZgAAM2YA/wBmAMwA
        ZgCZAGYAZgBmADMAZgAAAGYA//8zAMz/MwCZ/zMAZv8zADP/MwAA/zMA/8wzAMzMMwCZzDMAZswzADPM
        MwAAzDMA/5kzAMyZMwCZmTMAZpkzADOZMwAAmTMA/2YzAMxmMwCZZjMAZmYzADNmMwAAZjMA/zMzAMwz
        MwCZMzMAZjMzADMzMwAAMzMA/wAzAMwAMwCZADMAZgAzADMAMwAAADMA//8AAMz/AACZ/wAAZv8AADP/
        AAAA/wAA/8wAAMzMAACZzAAAZswAADPMAAAAzAAA/5kAAMyZAACZmQAAZpkAADOZAAAAmQAA/2YAAMxm
        AACZZgAAZmYAADNmAAAAZgAA/zMAAMwzAACZMwAAZjMAADMzAAAAMwAA/wAAAMwAAACZAAAAZgAAADMA
        AAAAAO4AAADdAAAAuwAAAKoAAACIAAAAdwAAAFUAAABEAAAAIgAAABEAAO4AAADdAAAAuwAAAKoAAACI
        AAAAdwAAAFUAAABEAAAAIgAAABEAAO4AAADdAAAAuwAAAKoAAACIAAAAdwAAAFUAAABEAAAAIgAAABEA
        AADu7u4A3d3dALu7uwCqqqoAiIiIAHd3dwBVVVUAREREACIiIgAREREAAAAAAP/9/f39/f39/f39/f39
        /f/9/f39/f39/f39/f39/f39/f14eHh4eHh4eHh4eHj9/f39eHh4eHh4eHh4eHh4/f39/Xh4eHh4eHh4
        eHh4eP39/f14eHh4eHh4eHh4eHj9/f39eP94/3j/eHj/eHh4/f39/Xj///94//94//94eP39/f14/3j/
        eP94//94/3j9/f39eHj/eHj//3j//3h4/f39/Xh4eHh4eHh4eHh4eP39/f14eHh4eHh4eHh4eHj9/f39
        eHh4eHh4eHh4eHh4/f39/f39/f39/f39/f39/f39/f39/f39/f39/f39/f39/f/9/f39/f39/f39/f39
        /f+AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACAAQAAKAAAABAAAAAgAAAAAQAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wAF8/wAAmT/AAYI
        3QCECPIApQBGANQAAADqqwIAFLcfABFkAAAFLFYAOnGQAMDAwACAgIAAQEBAAAAAAAD/////////////
        /////////3d3d3d3d///d3d3d3d3//93d3d3d3f//3d3d3d3d///f39/d/d3//9//3/3/3f//39/f3/3
        9///d/d/9/93//93d3d3d3f//3d3d3d3d///d3d3d3d3/////////////////////////////////4AB
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAB
        AAA=
</value>
  </data>
</root>